trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
km<-kmeans(trainImportantes,3)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
datos[is.na(datos)]<-0
#datos <- na.omit(datos)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
km<-kmeans(trainImportantes,3)
datos$grupo<-km$cluster
datos$grupo <- mapvalues(datos$grupo, c(1,2,3), c("Caro","Barato","Intermedio"))
porcentaje<-0.7
set.seed(123)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=train)
predBayes<-predict(modelo, newdata = test[,1:81])
predBayes<-predict(modelo, newdata = test[,1:81])
confusionMatrix(table(predBayes,test$grupo))
ct<-trainControl(method = "cv",train[,1:81],number=10, verboseIter=T)
modeloCaret<-train(grupo~.,data=datos,method="nb",trControl = ct)
modeloCaret<-train(train$grupo~.,data=datos,method="nb",trControl = ct)
modeloCaret<-train(grupo~.,data=datos,method="nb",trControl = ct)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
#datos[is.na(datos)]<-0
datos <- na.omit(datos)
#datos[is.na(datos)]<-0
datos <- na.omit(datos)
na.omit(datos)
is.na(datos)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
is.na(datos)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
datos[is.na(datos)]<-0
is.na(datos)
#datos <- na.omit(datos)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
km<-kmeans(trainImportantes,3)
datos$grupo<-km$cluster
g1<- train[train$grupo==1,]
datos <- na.omit(datos)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
datos[is.na(datos)]<-0
#datos <- na.omit(datos)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
km<-kmeans(trainImportantes,3)
datos$grupo<-km$cluster
datos$grupo <- mapvalues(datos$grupo, c(1,2,3), c("Caro","Barato","Intermedio"))
porcentaje<-0.7
set.seed(123)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=train)
predBayes<-predict(modelo, newdata = test[,1:81])
predBayes<-predict(modelo, newdata = test[,1:81])
confusionMatrix(table(predBayes,test$grupo))
ct<-trainControl(method = "cv",train[,1:81],number=10, verboseIter=T)
modeloCaret<-train(grupo~.,data=datos,method="nb",trControl = ct)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
#datos <- na.omit(datos)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
datos$grupo<-km$cluster
datos$grupo <- mapvalues(datos$grupo, c(1,2,3), c("Caro","Barato","Intermedio"))
porcentaje<-0.7
set.seed(123)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=train)
predBayes<-predict(modelo, newdata = test[,1:81])
confusionMatrix(table(predBayes,test$grupo))
ct<-trainControl(method = "cv",train[,1:81],number=10, verboseIter=T)
modeloCaret<-train(grupo~.,data=datos,method="nb",trControl = ct)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
datos <- datos[complete.cases(datos), ]
#datos <- na.omit(datos)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
km<-kmeans(trainImportantes,3)
datos$grupo<-km$cluster
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
datos <- datos[complete.cases(datos), ]
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
is.na(datos)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
#is.na(datos)
#datos <- na.omit(datos)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
datos$grupo<-km$cluster
datos$grupo <- mapvalues(datos$grupo, c(1,2,3), c("Caro","Barato","Intermedio"))
porcentaje<-0.7
set.seed(123)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=train)
predBayes<-predict(modelo, newdata = test[,1:81])
confusionMatrix(table(predBayes,test$grupo))
ct<-trainControl(method = "cv",train[,1:81],number=10, verboseIter=T)
ct<-trainControl(method = "cv",train[,1:81],number=5, verboseIter=T)
modeloCaret<-train(grupo~.,data=datos,method="nb",trControl = ct)
library(e1071)
library(caret)
porcentaje<-0.7
datos<-iris
set.seed(123)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
modelo<-naiveBayes(Species~.,data=train)
predBayes<-predict(modelo, newdata = test[,1:4])
confusionMatrix(predBayes,test$Species)
ct<-trainControl(method = "cv",train[,1:4],number=10, verboseIter=T)
modeloCaret<-train(Species~.,data=datos,method="nb",trControl = ct)
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(caret)
library(plyr)
library(dplyr)
#Ubicacion de archivos en computadoras
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT5/Hoja-de-trabajo-5")
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
datos$Utilities <- NULL
datos$Alley <- mapvalues(datos$Alley, c(NA), c("None"))
datos$MasVnrType <- mapvalues(datos$MasVnrType, c(NA), c("None"))
datos$BsmtQual <- mapvalues(datos$BsmtQual, c(NA), c("None"))
datos$BsmtCond <- mapvalues(datos$BsmtCond, c(NA), c("None"))
datos$BsmtExposure <- mapvalues(datos$BsmtExposure, c(NA), c("None"))
datos$BsmtFinType1 <- mapvalues(datos$BsmtFinType1, c(NA), c("None"))
datos$BsmtFinType2 <- mapvalues(datos$BsmtFinType2, c(NA), c("None"))
datos$Electrical <- mapvalues(datos$Electrical, c(NA), c("None"))
datos$FireplaceQu <- mapvalues(datos$FireplaceQu, c(NA), c("None"))
datos$GarageType <- mapvalues(datos$GarageType, c(NA), c("None"))
datos$GarageFinish <- mapvalues(datos$GarageFinish, c(NA), c("None"))
datos$GarageQual <- mapvalues(datos$GarageQual, c(NA), c("None"))
datos$GarageCond <- mapvalues(datos$GarageCond, c(NA), c("None"))
datos$PoolQC <- mapvalues(datos$PoolQC, c(NA), c("None"))
datos$Fence <- mapvalues(datos$Fence, c(NA), c("None"))
datos$MiscFeature <- mapvalues(datos$MiscFeature, c(NA), c("None"))
datos$LotFrontage <- mapvalues(datos$LotFrontage, c(NA), c(0))
datos$MasVnrArea <- mapvalues(datos$MasVnrArea, c(NA), c(0))
datos$GarageYrBlt <- mapvalues(datos$GarageYrBlt, c(NA), c(0))
#is.na(datos)
#datos <- na.omit(datos)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
km<-kmeans(trainImportantes,3)
datos$grupo<-km$cluster
datos$grupo <- mapvalues(datos$grupo, c(1,2,3), c("Caro","Barato","Intermedio"))
porcentaje<-0.7
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=train)
predBayes<-predict(modelo, newdata = test[,1:80])
predBayes<-predict(modelo, newdata = test[,1:80])
confusionMatrix(table(predBayes,test$grupo))
ct<-trainControl(method = "cv",train[,1:80],number=2, verboseIter=T)
modeloCaret<-train(grupo~.,data=datos,method="nb",trControl = ct)
View(datos)
table(datos)
ldply(datos, function(c) sum(c=="Lw"))
ldply(datos, function(c) sum(c=="ConLw"))
View(datos$MSSubClass)
View(datos$MSZoning)
summary(datos)
summary(datos)
ct<-trainControl(method = "cv",train[,1:80],number=2, verboseIter=T)
modeloCaret<-train(grupo~.,data=datos,method="nb",trControl = ct)
ldply(datos, function(c) sum(c=="Family"))
View(datos$SaleCondition)
View(datos$None)
ldply(datos, function(c) sum(c=="None"))
modeloCaret<-train(grupo~.,data=datos,method="nb",trControl = ct)
ct<-trainControl(method = "cv",train[,1:80],number=1, verboseIter=T)
modeloCaret<-train(grupo~.,data=datos,method="nb",trControl = ct)
ct<-trainControl(method = "cv",train[,1:80],number=1, verboseIter=T)
modeloCaret<-train(grupo~.,data=datos,method="nb",trControl = ct)
ct<-trainControl(method = "cv",train[,1:80],number=2, verboseIter=T)
modeloCaret<-train(as.factor(grupo)~.,data=datos,method="nb",trControl = ct)
modeloCaret<-train(as.factor(grupo)~.,data=as.factor(datos),method="nb",trControl = ct)
modeloCaret<-train(as.factor(grupo)~.,data=datos,method="nb",trControl = ct)
ct<-trainControl(method = "cv",train[,1:80],number=2, verboseIter=T)
modeloCaret<-train(as.factor(grupo)~.,data=as.factor(datos),method="nb",trControl = ct)
ct<-trainControl(method = "cv",train[,1:80],number=2, verboseIter=T)
modeloCaret<-train(as.factor(datos$grupo)~.,data=as.factor(datos),method="nb",trControl = ct)
as.factor(datos$grupo)
ct<-trainControl(method = "cv",train[,1:80],number=2, verboseIter=T)
modeloCaret<-train(as.factor(datos$grupo)~.,data=as.factor(datos),method="nb",trControl = ct)
ct<-trainControl(method = "cv",train[,1:80],number=2, verboseIter=T)
modeloCaret<-train(as.factor(datos$grupo)~.,data=datos,method="nb",trControl = ct)
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(caret)
library(plyr)
library(dplyr)
#Ubicacion de archivos en computadoras
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT5/Hoja-de-trabajo-5")
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
datos$Utilities <- NULL
#is.na(datos)
#datos <- na.omit(datos)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
datos$grupo<-km$cluster
summary(datos$grupo)
summary(datos)
g1<- datos[datos$grupo==1,]
g2<- datos[datos$grupo==2,]
g3<- datos[datos$grupo==3,]
g1
summary(g1)
summary(g2)
summary(g3)
datos$grupo <- mapvalues(datos$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
porcentaje<-0.7
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=train)
predBayes<-predict(modelo, newdata = test[,1:80])
predBayes<-predict(modelo, newdata = test[,1:80])
confusionMatrix(table(predBayes,test$grupo))
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
#is.na(datos)
#datos <- na.omit(datos)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
datos$grupo<-km$cluster
g1<- datos[datos$grupo==1,]
g2<- datos[datos$grupo==2,]
g3<- datos[datos$grupo==3,]
summary(g1)
summary(g2)
summary(g3)
datos$grupo <- mapvalues(datos$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
porcentaje<-0.7
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=train)
predBayes<-predict(modelo, newdata = test[,1:80])
confusionMatrix(table(predBayes,test$grupo))
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
datos$Utilities <- NULL
#is.na(datos)
#datos <- na.omit(datos)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","KitchenAbvGr","GarageCars","PoolArea","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
datos$grupo<-km$cluster
g1<- datos[datos$grupo==1,]
g2<- datos[datos$grupo==2,]
g3<- datos[datos$grupo==3,]
datos$grupo <- mapvalues(datos$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
summary(g1)
porcentaje<-0.7
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=train)
predBayes<-predict(modelo, newdata = test[,1:80])
confusionMatrix(table(predBayes,test$grupo))
library(e1071)
library(caret)
library(plyr)
library(dplyr)
library(lattice)
#Ubicacion de archivos en computadoras
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT5/Hoja-de-trabajo-5")
#setwd("C:/Users/alber/Documents/UVG/Septimo semestre/Mineria de Datos/Hoja-Trabajo-5/Hoja-de-trabajo-5")
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Caro","Barato","Intermedio"))
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=trainImportantes)
predBayes<-predict(modelo, newdata = test[,1:11])
confusionMatrix(table(predBayes,test$grupo))
ct<-trainControl(method = "cv", train,number=10, verboseIter=T)
modeloCaret<-train(grupo~.,data=trainImportantes,method="nb",trControl = ct)
prediccionCaret<-predict(modeloCaret,newdata = test[,1:11])
confusionMatrix(table(prediccionCaret,test$grupo))
library(e1071)
library(caret)
library(plyr)
library(dplyr)
library(lattice)
#Ubicacion de archivos en computadoras
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT5/Hoja-de-trabajo-5")
#setwd("C:/Users/alber/Documents/UVG/Septimo semestre/Mineria de Datos/Hoja-Trabajo-5/Hoja-de-trabajo-5")
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
g1<- trainImportantes[trainImportantes$grupo==1,]
g2<- trainImportantes[trainImportantes$grupo==2,]
g3<- trainImportantes[trainImportantes$grupo==3,]
summary(g1)
summary(g2)
summary(g3)
summary(g2)
summary(g3)
summary(g1)
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","caro"))
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=trainImportantes)
predBayes<-predict(modelo, newdata = test[,1:11])
confusionMatrix(table(predBayes,test$grupo))
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(e1071)
library(caret)
library(e1071)
library(caret)
library(plyr)
library(dplyr)
library(lattice)
library(rpart)
#Ubicacion de archivos en computadoras
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT5/Hoja-de-trabajo-5")
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","caro"))
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=trainImportantes)
predBayes<-predict(modelo, newdata = test[,1:11])
confusionMatrix(table(predBayes,test$grupo))
ct<-trainControl(method = "cv", train,number=10, verboseIter=T)
modeloCaret<-train(grupo~.,data=trainImportantes,method="nb",trControl = ct)
prediccionCaret<-predict(modeloCaret,newdata = test[,1:11])
confusionMatrix(table(prediccionCaret,test$grupo))
trainRowsNumber<-sample(1:nrow(trainImportantes),porciento*nrow(trainImportantes))
trainRowsNumber<-sample(1:nrow(trainImportantes),porcentaje*nrow(trainImportantes))
dt_model<-rpart(grupo~.,train,method = "class")
prediccion <- predict(dt_model, newdata = test[,1:11])
columnaMasAlta<-apply(prediccion, 1, function(x) colnames(prediccion)[which.max(x)])
test$prediccion<-columnaMasAlta
cfm<-confusionMatrix(table(test$prediccion, test$grupo))
cfm
View(test[,1:11])
trainRowsNumber<-sample(1:nrow(trainImportantes),porcentaje*nrow(trainImportantes))
train1<-trainImportantes[trainRowsNumber,]
test1<-trainImportantes[-trainRowsNumber,]
trainRowsNumber<-sample(1:nrow(trainImportantes),porcentaje*nrow(trainImportantes))
train1<-trainImportantes[trainRowsNumber,]
test1<-trainImportantes[-trainRowsNumber,]
dt_model<-rpart(grupo~.,train1,method = "class")
View(test)
prediccion <- predict(dt_model, newdata = test1[,1:11])
columnaMasAlta<-apply(prediccion, 1, function(x) colnames(prediccion)[which.max(x)])
test1$prediccion<-columnaMasAlta
cfm<-confusionMatrix(table(test$prediccion, test1$grupo))
cfm
trainRowsNumber<-sample(1:nrow(trainImportantes),porcentaje*nrow(trainImportantes))
train1<-trainImportantes[trainRowsNumber,]
test1<-trainImportantes[-trainRowsNumber,]
dt_model<-rpart(grupo~.,train1,method = "class")
prediccion <- predict(dt_model, newdata = test1[,1:11])
columnaMasAlta<-apply(prediccion, 1, function(x) colnames(prediccion)[which.max(x)])
test1$prediccion<-columnaMasAlta
cfm<-confusionMatrix(table(test1$prediccion, test1$grupo))
cfm
View(test1)
seed(1234)
trainRowsNumber<-sample(1:nrow(trainImportantes),porcentaje*nrow(trainImportantes))
set.seed(1234)
trainRowsNumber<-sample(1:nrow(trainImportantes),porcentaje*nrow(trainImportantes))
train1<-trainImportantes[trainRowsNumber,]
test1<-trainImportantes[-trainRowsNumber,]
dt_model<-rpart(grupo~.,train1,method = "class")
prediccion <- predict(dt_model, newdata = test1[,1:11])
columnaMasAlta<-apply(prediccion, 1, function(x) colnames(prediccion)[which.max(x)])
test1$prediccion<-columnaMasAlta
cfm<-confusionMatrix(table(test1$prediccion, test1$grupo))
cfm
View(head(trainImportantes))
trainImportantes$SalePrice<-NULL
View(head(trainImportantes))
View(head(train1)
z
View(head(train1))
trainRowsNumber<-sample(1:nrow(trainImportantes),porcentaje*nrow(trainImportantes))
train1<-trainImportantes[trainRowsNumber,]
test1<-trainImportantes[-trainRowsNumber,]
View(head(train1))
dt_model<-rpart(grupo~.,train1,method = "class")
View(head(test1))
prediccion <- predict(dt_model, newdata = test1[,1:10])
columnaMasAlta<-apply(prediccion, 1, function(x) colnames(prediccion)[which.max(x)])
test1$prediccion<-columnaMasAlta
cfm<-confusionMatrix(table(test1$prediccion, test1$grupo))
cfm
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(caret)
library(caret)
library(plyr)
library(dplyr)
library(lattice)
library(rpart)
#Ubicacion de archivos en computadoras
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT5/Hoja-de-trabajo-5")
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","caro"))
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=trainImportantes)
predBayes<-predict(modelo, newdata = test[,1:11])
confusionMatrix(table(predBayes,test$grupo))
ct<-trainControl(method = "cv", train,number=10, verboseIter=T)
modeloCaret<-train(grupo~.,data=trainImportantes,method="nb",trControl = ct)
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(caret)
library(plyr)
library(dplyr)
library(lattice)
library(rpart)
#Ubicacion de archivos en computadoras
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT5/Hoja-de-trabajo-5")
set.seed(123)
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","caro"))
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
modelo<-naiveBayes(as.factor(grupo)~.,data=trainImportantes)
predBayes<-predict(modelo, newdata = test[,1:11])
confusionMatrix(table(predBayes,test$grupo))
ct<-trainControl(method = "cv", train,number=10, verboseIter=T)
modeloCaret<-train(grupo~.,data=trainImportantes,method="nb",trControl = ct)
prediccionCaret<-predict(modeloCaret,newdata = test[,1:11])
prediccionCaret<-predict(modeloCaret,newdata = test[,1:11])
confusionMatrix(table(prediccionCaret,test$grupo))
prediccionCaret<-predict(modeloCaret,newdata = test[,1:11])
trainImportantes$SalePrice<-NULL
trainRowsNumber<-sample(1:nrow(trainImportantes),porcentaje*nrow(trainImportantes))
train1<-trainImportantes[trainRowsNumber,]
test1<-trainImportantes[-trainRowsNumber,]
dt_model<-rpart(grupo~.,train1,method = "class")
prediccion <- predict(dt_model, newdata = test1[,1:10])
columnaMasAlta<-apply(prediccion, 1, function(x) colnames(prediccion)[which.max(x)])
test1$prediccion<-columnaMasAlta
cfm<-confusionMatrix(table(test1$prediccion, test1$grupo))
cfm
library(caret)
library(dummy)
library(plyr)
library(dplyr)
library(e1071)
library(lattice)
library(rpart)
library(nnet)
library(RWeka)
library(neural)
library(neuralnet)
#Redes Neuronales
setwd("C:/Users/Gustavo/Desktop/SEPTIMO SEMESTRE/MINERIA/HDT7/HDT7-MINERIA")
#setwd("C:/Users/alber/Documents/UVG/Septimo semestre/Mineria de Datos/Hoja-Trabajo-6/Hoja-de-trabajo-06")
porcentaje<-0.7
datos <- read.csv("train.csv", stringsAsFactors = FALSE)
set.seed(123)
trainImportantes <- datos[c("MSSubClass","LotFrontage","LotArea","OverallCond","YearBuilt","YearRemodAdd","X2ndFlrSF","FullBath","TotRmsAbvGrd","GarageCars","SalePrice")]
trainImportantes[is.na(trainImportantes)]<-0
km<-kmeans(trainImportantes,3)
trainImportantes$grupo<-km$cluster
trainImportantes$grupo <- mapvalues(trainImportantes$grupo, c(1,2,3), c("Intermedio","Barato","Caro"))
#trainImportantes<-cbind(trainImportantes,dummy(trainImportantes,verbose = T))
porcentaje<-0.7
corte <- sample(nrow(trainImportantes),nrow(trainImportantes)*porcentaje)
train<-trainImportantes[corte,]
test<-trainImportantes[-corte,]
install.packages("profileR")
